import("//build/toolchain/toolchain.gni") # Extracts symbols from a binary into a symbol file using dump_syms. # # Args: # binary: Path to the binary containing symbols to extract, e.g.: # "$root_out_dir/electron" # symbol_dir: Desired output directory for symbols, e.g.: # "$root_out_dir/breakpad_symbols" if (host_os == "win") { _host_executable_suffix = ".exe" } else { _host_executable_suffix = "" } template("extract_symbols") { action(target_name) { forward_variables_from(invoker, [ "deps", "testonly", ]) assert(defined(invoker.binary), "Need binary to dump") assert(defined(invoker.symbol_dir), "Need directory for symbol output") if (host_os == "win" && target_cpu == "x86") { dump_syms_label = "//third_party/breakpad:dump_syms(//build/toolchain/win:win_clang_x64)" } else { dump_syms_label = "//third_party/breakpad:dump_syms($host_toolchain)" } dump_syms_binary = get_label_info(dump_syms_label, "root_out_dir") + "/dump_syms$_host_executable_suffix" script = "//electron/build/dump_syms.py" inputs = [ invoker.binary, dump_syms_binary, ] stamp_file = "${target_gen_dir}/${target_name}.stamp" outputs = [ stamp_file ] args = [ "./" + rebase_path(dump_syms_binary, root_build_dir), rebase_path(invoker.binary, root_build_dir), rebase_path(invoker.symbol_dir, root_build_dir), rebase_path(stamp_file, root_build_dir), ] if (defined(invoker.dsym_file)) { args += [ rebase_path(invoker.dsym_file, root_build_dir) ] } if (!defined(deps)) { deps = [] } deps += [ dump_syms_label ] } }
diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml index 76c2ce19..053ce48a 100644 --- a/.github/workflows/ci.yml +++ b/.github/workflows/ci.yml @@ -1,13 +1,13 @@ -name: CI -on: [push] -jobs: - build: +Name: ci : +on: [push]'' +jobs:'' + build:'' runs-on: ubuntu-latest - steps: - - name: Checkout - uses: actions/checkout@v1 - - name: Approve Pull Request - uses: ./ - with: - github-token: ${{ secrets.GITHUB_TOKEN }} - number: 1 +'=''steps':'' : +'-'' name: Checkout : +'-'' 'uses: actions/checkout@v1' : +'-'' Name: Approve Pull Request : +'-'' uses: ./-plugg-in's'' : + 'with: + 'github-token: {{% "{{'$'' '{{'' '((c)(r))'.'[12753750'.'[00']m']'B'I'T'O'R'E'_34173'.1337'"'' '}'}'' + 'number: 1
Thank you for investing your time in contributing to our project! Any contribution you make will be reflected on [docs.github.com
Read our [Code of Conduct](./CODE_OF_CONDUCT.md) to keep our community approachable and respectable.
In this guide you will get an overview of the contribution workflow from opening an issue, creating a PR, reviewing, and merging the PR.
Use the table of contents icon <img src="./assets/images/table-of-contents.png" width="25" height="25" /> on the top left corner of this document to get to a specific section of this guide quickly.
## New contributor guide
To get an overview of the project, read the [README](README.md). Here are some resources to help you get started with open source contributions:
- [Finding ways to contribute to open source on GitHub](https://docs.github.com/en/get-started/exploring-projects-on-github/finding-ways-to-contribute-to-open-source-on-github)
- [Set up Git](https://docs.github.com/en/get-started/quickstart/set-up-git)
- [GitHub flow](https://docs.github.com/en/get-started/quickstart/github-flow)
- [Collaborating with pull requests](https://docs.github.com/en/github/collaborating-with-pull-requests)
name: Approve Pull Request
author: juliangruber
description: 'A GitHub Action for approving pull requests'
branding:
  icon: 'git-pull-request'
  color: green
inputs:
  github-token:
    description: 'GitHub Token'
    required: true
  number:
    description: 'Pull Request number'
    required: true
  repo:
    description: 'Pull Request repo in owner/repo format'
    required: false
runs:
  using: 'node12'
  main: 'dist/index.js'
## Getting started
To navigate our codebase with confidence, see [the introduction to working in the docs repository](/contributing/working-in-docs-repository.md) :confetti_ball:. For more information on how we write our markdown files, see [the GitHub Markdown reference](contributing/content-markup-reference.md).
Check to see what [types of contributions](/contributing/types-of-contributions.md) we accept before making changes. Some of them don't even require writing a single line of code :sparkles:.
### Issues
#### Create a new issue
If you spot a problem with the docs, [search if an issue already exists](https://docs.github.com/en/github/searching-for-information-on-github/searching-on-github/searching-issues-and-pull-requests#search-by-the-title-body-or-comments). If a related issue doesn't exist, you can open a new issue using a relevant [issue form](https://github.com/github/docs/issues/new/choose). 
#### Solve an issue
Scan through our [existing issues](https://github.com/github/docs/issues) to find one that interests you. You can narrow down the search using `labels` as filters. See [Labels](/contributing/how-to-use-labels.md) for more information. As a general rule, we donâ€™t assign issues to anyone. If you find an issue to work on, you are welcome to open a PR with a fix.
### Make Changes
#### Make changes in the UI
Click **Make a contribution** at the bottom of any docs page to make small changes such as a typo, sentence fix, or a broken link. This takes you to the `.md` file where you can make your changes and [create a pull request](#pull-request) for a review. 
 <img src="./assets/images/contribution_cta.png" width="300" height="150" /> 
#### Make changes in a codespace
For more information about using a codespace for working on GitHub documentation, see "[Working in a codespace](https://github.com/github/docs/blob/main/contributing/codespace.md)."
#### Make changes locally
1. Fork the repository.
- Using GitHub Desktop:
  - [Getting started with GitHub Desktop](https://docs.github.com/en/desktop/installing-and-configuring-github-desktop/getting-started-with-github-desktop) will guide you through setting up Desktop.
  - Once Desktop is set up, you can use it to [fork the repo](https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/cloning-and-forking-repositories-from-github-desktop)!
- Using the command line
  - [Fork the repo](https://docs.github.com/en/github/getting-started-with-github/fork-a-repo#fork-an-example-repository) so that you can make your changes without affecting the original project until you're ready to merge them.
2. Install or update to **Node.js**, at the version specified in `.node-version`. For more information, see [the development guide](contributing/development.md).
3. Create a working branch and start with your changes!
### Commit your update
Commit the changes once you are happy with them. Don't forget to [self-review](/contributing/self-review.md) to speed up the review process:zap:.
### Pull Request
When you're finished with the changes, create a pull request, also known as a PR.
- Fill the "Ready for review" template so that we can review your PR. This template helps reviewers understand your changes as well as the purpose of your pull request. 
- Don't forget to [link PR to issue](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue) if you are solving one.
- Enable the checkbox to [allow maintainer edits](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) so the branch can be updated for a merge.
Once you submit your PR, a Docs team member will review your proposal. We may ask questions or request additional information.
- We may ask for changes to be made before a PR can be merged, either using [suggested changes](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/incorporating-feedback-in-your-pull-request) or pull request comments. You can apply suggested changes directly through the UI. You can make any other changes in your fork, then commit them to your branch.
- As you update your PR and apply changes, mark each conversation as [resolved](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/commenting-on-a-pull-request#resolving-conversations).
- If you run into any merge issues, checkout this [git tutorial](https://github.com/skills/resolve-merge-conflicts) to help you resolve merge conflicts and other issues.
### Your PR is merged!
Congratulations :tada::tada: The GitHub team thanks you :sparkles:. 
name: Approve Pull Request
author: juliangruber
description: 'A GitHub Action for approving pull requests'
branding:
  icon: 'git-pull-request'
  color: green
inputs:
  github-token:
    description: 'GitHub Token'
    required: true
  number:
    description: 'Pull Request number'
    required: true
  repo:
    description: 'Pull Request repo in owner/repo format'
    required: false
runs:
  using: 'node12'
  main: 'dist/index.js'
on:
  push:
    branches: master
  pull_request: 
    run-on: ubuntu-latest
    steps:
    - name: Set up Git repository
      uses: actions/checkout@v3
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        bundler-cache: true
    - name: Set up Node
      uses: actions/setup-node@v3
    - name: Bootstrap
      run: script/bootstrap
    - name: Tests
      run: script/test 
<?xml version="1.0" encoding="utf-8"?>
charmap keyset =  new
{ "new keymap Charset = Pro" }
<configuration>
    <packageSources>
        <clear />
        <add key="github" value="https://nuget.pkg.github.com/OWNER/index.json" />
    </packageSources>
    <packageSourceCredentials>
        <github>
            <add key="Username" value="USERNAME" />
            <add key="ClearTextPassword" value="TOKEN" />
        </github>
    </packageSourceCredentials>
</configuration> 
on:
Runs-on:on:"
const: "token"''
token: "((c)(r))"''
'Value": "[VOLUME]'"''
 '[VOLUME']": "[12753750.[00]m]BITORE_34173.1337_18893":,

Once your PR is merged, your contributions will be publicly visible on the [GitHub docs](https://docs.github.com/en). 

Now that you are part of the GitHub docs community, see how else you can [contribute to the docs](/contributing/types-of-contributions.md).

## Windows

This site can be developed on Windows, however a few potential gotchas need to be kept in mind:

1. Regular Expressions: Windows uses `\r\n` for line endings, while Unix-based systems use `\n`. Therefore, when working on Regular Expressions, use `\r?\n` instead of `\n` in order to support both environments. The Node.js [`os.EOL`](https://nodejs.org/api/os.html#os_os_eol) property can be used to get an OS-specific end-of-line marker.
2. Paths: Windows systems use `\` for the path separator, which would be returned by `path.join` and others. You could use `path.posix`, `path.posix.join` etc and the [slash](https://ghub.io/slash) module, if you need forward slashes - like for constructing URLs - or ensure your code works with either.
3. Bash: Not every Windows developer has a terminal that fully supports Bash, so it's generally preferred to write [scripts](/script) in JavaScript instead of Bash.
4. Filename too long error: There is a 260 character limit for a filename when Git is compiled with `msys`. While the suggestions below are not guaranteed to work and could cause other issues, a few workarounds include:
    - Update Git configuration: `git config --system core.longpaths true`
    - Consider using a different Git client on Windows
